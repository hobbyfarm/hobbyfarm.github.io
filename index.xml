<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to HobbyFarm on HobbyFarm</title><link>http://hobbyfarm.github.io/</link><description>Recent content in Welcome to HobbyFarm on HobbyFarm</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://hobbyfarm.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Prerequisites</title><link>http://hobbyfarm.github.io/docs/installation/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/installation/prerequisites/</guid><description>The following prerequisites are required for installing HobbyFarm. Please ensure that all prerequisites are met before proceeding with the installation. Failure to do so may result in an unsuccessful installation.
Helm Helm v3 is required for deploying HobbyFarm. Please refer to the Helm documentation for instructions on installing Helm.
Kubernetes HobbyFarm is a Kubernetes-native application, using custom resources and controllers to manage the application. To run HobbyFarm, a Kubernetes cluster with an installed ingress controller is required.</description></item><item><title>Settings</title><link>http://hobbyfarm.github.io/docs/configuration/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/configuration/settings/</guid><description>The Settings page allows administrators to configure general settings for the HobbyFarm platform. To access the Settings page, log into the HobbyFarm Admin-UI and click the Configuration option in the top navigation menu. In the left navigation menu, click the Settings option.
Settings are divided into the following scopes:
Public The Public scope is used to configure settings which impact the HobbyFarm platform as a whole.
Setting Default Optional Description User UI MOTD none Yes A message to be displayed to users when logging into the HobbyFarm User UI.</description></item><item><title>Deployment</title><link>http://hobbyfarm.github.io/docs/installation/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/installation/deployment/</guid><description>The following steps will guide you through the deployment of HobbyFarm in a Kubernetes environment using Helm. Please ensure that all prerequisites are met before proceeding with the installation. Failure to do so may result in an unsuccessful installation.
Step 1: Add Helm Repository Using Helm, add the HobbyFarm repository and generate a values.yaml file for customization.
## Add the required Helm repository helm repo add hobbyfarm https://hobbyfarm.github.io/hobbyfarm ## Update your local Helm repository cache helm repo update ## List available versions of HobbyFarm helm search repo hobbyfarm/hobbyfarm ## Get the values.</description></item><item><title>VM Templates</title><link>http://hobbyfarm.github.io/docs/configuration/vmtemplates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/configuration/vmtemplates/</guid><description>The VM Templates page allows administrators to configure templates for virtual machines used by HobbyFarm. These templates are used in by HobbyFarm Environments to create virtual machines on 3rd party platforms.
To access the Settings page, log into the HobbyFarm Admin-UI and click the Configuration option in the top navigation menu. In the left navigation menu, click the VM Templates option.
Creating a VM Template To create a new VM Template, click on the +NEW button in the top left corner of the page under the VM Templates heading.</description></item><item><title>Admin Account</title><link>http://hobbyfarm.github.io/docs/installation/initial_admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/installation/initial_admin/</guid><description>Once you have installed HobbyFarm, an initial administrator account must be created. This account will be used to manage the HobbyFarm platform.
Step 1: Register a User Visit the newly deployed HobbyFarm UI at https://learn.{domain}.com and register a new user.
NOTE: If a different URL for the end-user learning interface was used, visit that URL instead.
Step 2: Verify the User As part of the deployment of HobbyFarm, new API resources are created in the cluster.</description></item><item><title>Environments</title><link>http://hobbyfarm.github.io/docs/configuration/environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/configuration/environments/</guid><description>An Environment defines specific implementation details on how HobbyFarm connects to a provider, such as DigitalOcean or AWS, for scheduling virtual machines. An environment defines configuration information such as provider credentials, virtual machine templates to use, and the total capacity of virtual machines which can be deployed.
To access the Environments page, log into the HobbyFarm Admin-UI and click the Configuration option in the top navigation menu. In the left navigation menu, click the Environments option.</description></item><item><title>Provisioners</title><link>http://hobbyfarm.github.io/docs/configuration/provisioners/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/configuration/provisioners/</guid><description>In HobbyFarm, a provisioner is a Kubernetes resource used to define the specific implementation details on how HobbyFarm connects to a provider, such as DigitalOcean or AWS, for scheduling virtual machines. A provisioner defines configuration information such as provider credentials, virtual machine templates to use, and the total capacity of virtual machines which can be deployed.
Current Provisioners Below is a list of the provisioners currently supported by HobbyFarm. Please visit the links below for more information on each provisioner, including documentation on how to deploy and configure the provisioners.</description></item><item><title>Roles</title><link>http://hobbyfarm.github.io/docs/configuration/roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/configuration/roles/</guid><description>In Kubernetes, a Role is a set of permissions that can be assigned to a user or group of users. A Role can be assigned to a user or group of HobbyFarm users via a RoleBinding. HobbyFarm provides an interface for creating and managing HobbyFarm specific Roles via the Admin-UI.
To access the Roles page, log into the HobbyFarm Admin-UI and click the Configuration option in the top navigation menu. In the left navigation menu, click the Roles option.</description></item><item><title>Backend Development</title><link>http://hobbyfarm.github.io/contributing/backend_development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/contributing/backend_development/</guid><description>HobbyFarm makes use of a backend service called Gargantua. Gargantua is a RESTful API written in Go. The following instructions will assist in setting up a local development environment for Gargantua.
The following instructions will assist in setting up a local development environment for Gargantua.
Requirements Gargantua is written in Go. To develop Gargantua, knowledge of Go is required.
The following tools are required to be installed:
Docker Docker Compose Plugin Setup The following instructions will assist in setting up a local development environment for Gargantua.</description></item><item><title>Course</title><link>http://hobbyfarm.github.io/docs/architecture/resources/course/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/course/</guid><description>A Course is useful in situations where a trainer wants to group related learnings together or provide a day&amp;rsquo;s worth of curriculum to students who can retain their VMs from scenario to scenario.
The Course resource is used to populate content in the HobbyFarm Admin-UI Content Management &amp;gt; Courses page. Modifying a Course resource in Kubernetes will modify the information in the Admin-UI.
Kubernetes Commands The following commands are useful for managing Course resources in Kubernetes.</description></item><item><title>Deprecated &amp; Removed Features</title><link>http://hobbyfarm.github.io/docs/appendix/deprecated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/appendix/deprecated/</guid><description>Deprecated Features The following features have been deprecated in HobbyFarm and will be removed in a future release.
Feature Deprecation Date Reason for Deprecation Terraform Provisioning October 2022 Compatibility, instability and performance issues Removed Features The following features have been completely removed from HobbyFarm.
Feature Removal Date Pull Request Reason RancherVM September 2023 #394 No longer maintained.</description></item><item><title>Environment</title><link>http://hobbyfarm.github.io/docs/architecture/resources/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/environment/</guid><description>An Environment resource contains configuration information such as where provider credentials are stored, what image to use when creating a VM, or how much capacity a provider has for a specific type of VM.
Kubernetes Commands The following commands are useful for managing Environment resources in Kubernetes.
## Get a list of all Environments kubectl get environments -n hobbyfarm-system ## Create an Environment from a YAML manifest kubectl apply -f {environmentManifest} -n hobbyfarm-system ## Edit an Environment kubectl edit environment {environmentName} -n hobbyfarm-system ## Backup an Environment to a YAML manifest kubectl get environment {environmentName} -n hobbyfarm-system -o yaml &amp;gt; {environmentManifest} ## Delete an Environment kubectl delete environment {environmentName} -n hobbyfarm-system Environment Manifest Example The following shows an example of an Environment manifest in Kubernetes.</description></item><item><title>Frontend Development</title><link>http://hobbyfarm.github.io/contributing/frontend_development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/contributing/frontend_development/</guid><description>HobbyFarm consists of two frontend applications: the primary user interface (ui) and the administrator user interface (admin-ui). The UI is the primary application users interact with. The Admin UI is a separate application used to manage the HobbyFarm backend.
The following instructions will assist in setting up a local development environment for HobbyFarm.
Requirements Both the UI and Admin UI are written in Angular. To develop either application, knowledge of Angular and Typescript is required.</description></item><item><title>Helm Options</title><link>http://hobbyfarm.github.io/docs/appendix/helm_options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/appendix/helm_options/</guid><description>This page contains a reference of the options available in the HobbyFarm Helm chart. Please visit the values.yaml file in the HobbyFarm repository for the most up-to-date list of options.
General Key Default Purpose insecure false Use insecure protocols. Useful for local development. Admin UI Options Key Default Purpose admin.image hobbyfarm/admin-ui:[version] Image used for admin-ui. admin.configMapName admin-config ConfigMap used to configure admin ui. admin.config.title HobbyFarm Administration Title of admin ui as seen in browser.</description></item><item><title>PredefinedService</title><link>http://hobbyfarm.github.io/docs/architecture/resources/predefinedservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/predefinedservice/</guid><description>A PredefinedService provides pre-configured Services that are available when creating or updating VirtualMachineTemplates. The services can be configured to provide a web interface that is proxied to the user.
Kubernetes Commands The following commands are useful for managing PredefinedService resources in Kubernetes.
## Get a list of all PredefinedServices kubectl get predefinedservices -n hobbyfarm-system ## Create a PredefinedService from a YAML manifest kubectl apply -f {predefinedServiceManifest} -n hobbyfarm-system ## Edit a PredefinedService kubectl edit predefinedservice {predefinedServiceName} -n hobbyfarm-system ## Backup a PredefinedService to a YAML manifest kubectl get predefinedservice {predefinedServiceName} -n hobbyfarm-system -o yaml &amp;gt; {predefinedServiceManifest} ## Delete a PredefinedService kubectl delete predefinedservice {predefinedServiceName} -n hobbyfarm-system Example PredefinedService Manifest The following shows an example of a PredefinedService manifest in Kubernetes.</description></item><item><title>Provider Images</title><link>http://hobbyfarm.github.io/docs/appendix/provider_images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/appendix/provider_images/</guid><description>A provider image is a virtual machine image which exists on a 3rd party cloud provider, such as DigitalOcean or AWS. These images are used by HobbyFarm to deploy virtual machines per cloud environment. The provider image is used to determine the operating system, software, and configuration of the virtual machine deployed and managed by HobbyFarm.
Image Examples Provider Image Image Type AMI URL DigitalOcean ubuntu-20-04-x64 Ubuntu 20.04 LTS x64 DO Available Images AWS ami-0a6e38961e6e621b0 Ubuntu 20.</description></item><item><title>Scenario</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scenario/</guid><description>Scenarios are the main content resource in HobbyFarm. They contain a series of steps which are presented to the end-user during a session. Scenarios also configure what VirtualMachineTemplates are necessary for use of the scenario.
Kubernetes Commands The following commands are useful for managing Scenario resources in Kubernetes.
## Get a list of all Scenarios kubectl get scenarios -n hobbyfarm-system ## Create a Scenario from a YAML manifest kubectl apply -f {scenarioManifest} -n hobbyfarm-system ## Edit a Scenario kubectl edit scenario {scenarioName} -n hobbyfarm-system ## Backup a Scenario to a YAML manifest kubectl get scenario {scenarioName} -n hobbyfarm-system -o yaml &amp;gt; {scenarioManifest} ## Delete a Scenario kubectl delete scenario {scenarioName} -n hobbyfarm-system Example Scenario Manifest The following shows an example of a Scenario manifest in Kubernetes.</description></item><item><title>ScheduledEvent</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scheduledevent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scheduledevent/</guid><description>In HobbyFarm, a ScheduledEvent is a collection of Scenarios and Courses that are scheduled to run at a specific time. ScheduledEvents make use of an access code to restrict access to the event.
Users must enter the access code to view and initiate the event. The access code is created during the creation of the ScheduledEvent and can be changed at any time. A ScheduledEvent can be configured to provision virtual machines on-demand or at a specific time.</description></item><item><title>Scope</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scope/</guid><description>A Scope is used to control access to settings in the HobbyFarm UI. For example, a setting that is only accessible by administrators would be assigned to the admin-ui scope.
Kubernetes Commands The following commands are useful for managing Scope resources in Kubernetes.
## Get a list of all Scopes kubectl get scopes -n hobbyfarm-system ## Create a Scope from a YAML manifest kubectl apply -f {scopeManifest} -n hobbyfarm-system ## Edit a Scope kubectl edit scope {scopeName} -n hobbyfarm-system ## Backup a Scope to a YAML manifest kubectl get scope {scopeName} -n hobbyfarm-system -o yaml &amp;gt; {scopeManifest} ## Delete a Scope kubectl delete scope {scopeName} -n hobbyfarm-system Example Scope Manifests The following shows an example of a Scope manifest in Kubernetes.</description></item><item><title>Session</title><link>http://hobbyfarm.github.io/docs/architecture/resources/session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/session/</guid><description>The Session resource in HobbyFarm tracks one or more users execution of a scenario or course, storing information such as the start time of the user, which scenario or course is being executed, etc.
NOTE: ⚠️ Sessions are created by HobbyFarm and SHOULD NOT be modified and/or created manually. This documentation is provided for informational purposes only.
Kubernetes Commands The following commands are useful for managing Session resources in Kubernetes.</description></item><item><title>Settings</title><link>http://hobbyfarm.github.io/docs/architecture/resources/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/settings/</guid><description>HobbyFarm makes use of adjustable settings to alter the behavior of the platform by adding or removing features via feature-gates or by setting variables, such as the retention time of specific objects.
Settings always have a name and a scope. The name provides a unique identifier for the setting while the scope defines who can adjust settings as well as who can retrieve the settings.
All settings are dynamically rendered in the Admin-UI under the Configuration &amp;gt; Settings page.</description></item><item><title>Special Markdown Syntax</title><link>http://hobbyfarm.github.io/docs/appendix/markdown_syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/appendix/markdown_syntax/</guid><description>This page contains a reference of the special markdown syntax available in the scenario contents.
Code Syntax Highlighting You can enable syntax highlighting by providing a language to the codeblock. Providing the optional filename will display it together with the content
```&amp;lt;language&amp;gt;:&amp;lt;optional filename&amp;gt; code ``` For example
```md # Content ``` ```yaml:myfile.yaml yaml: highlight this #comment ``` Click-To-File Beginning with HobbyFarm 2.0.6 you can also enable users to create files directly with one click using the folowing syntax:</description></item><item><title>User</title><link>http://hobbyfarm.github.io/docs/architecture/resources/user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/user/</guid><description>Users are represented in HobbyFarm via the User resource. Users can be created automatically via the registration page or manually via a manifest.
Kubernetes Commands The following commands are useful for managing User resources in Kubernetes.
## Get a list of all Users kubectl get users -n hobbyfarm-system ## Create a User from a YAML manifest kubectl apply -f {userManifest} -n hobbyfarm-system ## Edit a User kubectl edit user {userName} -n hobbyfarm-system ## Backup a User to a YAML manifest kubectl get user {userName} -n hobbyfarm-system -o yaml &amp;gt; {userManifest} ## Delete a User kubectl delete user {userName} -n hobbyfarm-system Example User Manifest The following is an example of a User resource in Kubernetes.</description></item><item><title>Virtual Machine Template</title><link>http://hobbyfarm.github.io/docs/architecture/resources/virtualmachinetemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/virtualmachinetemplate/</guid><description>A VirtualMachineTemplate allows the HobbyFarm platform to schedule resources across multiple providers while providing a common definition for content creators. It is a required resource for creating an Environment.
A VM template represents a potential VM configuration, with its implementation varying by provider. For instance, AWS might interpret the template as a t3.medium, while Azure might implement it as a Standard_D2_v2.
Each Environment is responsible for determining the specific realization of a VirtualMachineTemplate.</description></item></channel></rss>