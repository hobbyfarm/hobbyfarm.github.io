<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>K8s Resources on HobbyFarm</title><link>http://hobbyfarm.github.io/docs/architecture/resources/</link><description>Recent content in K8s Resources on HobbyFarm</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://hobbyfarm.github.io/docs/architecture/resources/index.xml" rel="self" type="application/rss+xml"/><item><title>Course</title><link>http://hobbyfarm.github.io/docs/architecture/resources/course/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/course/</guid><description>A Course is useful in situations where a trainer wants to group related learnings together or provide a day&amp;rsquo;s worth of curriculum to students who can retain their VMs from scenario to scenario.
The Course resource is used to populate content in the HobbyFarm Admin-UI Content Management &amp;gt; Courses page. Modifying a Course resource in Kubernetes will modify the information in the Admin-UI.
Kubernetes Commands The following commands are useful for managing Course resources in Kubernetes.</description></item><item><title>Environment</title><link>http://hobbyfarm.github.io/docs/architecture/resources/environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/environment/</guid><description>An Environment resource contains configuration information such as where provider credentials are stored, what image to use when creating a VM, or how much capacity a provider has for a specific type of VM.
Kubernetes Commands The following commands are useful for managing Environment resources in Kubernetes.
## Get a list of all Environments kubectl get environments -n hobbyfarm-system ## Create an Environment from a YAML manifest kubectl apply -f {environmentManifest} -n hobbyfarm-system ## Edit an Environment kubectl edit environment {environmentName} -n hobbyfarm-system ## Backup an Environment to a YAML manifest kubectl get environment {environmentName} -n hobbyfarm-system -o yaml &amp;gt; {environmentManifest} ## Delete an Environment kubectl delete environment {environmentName} -n hobbyfarm-system Environment Manifest Example The following shows an example of an Environment manifest in Kubernetes.</description></item><item><title>PredefinedService</title><link>http://hobbyfarm.github.io/docs/architecture/resources/predefinedservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/predefinedservice/</guid><description>A PredefinedService provides pre-configured Services that are available when creating or updating VirtualMachineTemplates. The services can be configured to provide a web interface that is proxied to the user.
Kubernetes Commands The following commands are useful for managing PredefinedService resources in Kubernetes.
## Get a list of all PredefinedServices kubectl get predefinedservices -n hobbyfarm-system ## Create a PredefinedService from a YAML manifest kubectl apply -f {predefinedServiceManifest} -n hobbyfarm-system ## Edit a PredefinedService kubectl edit predefinedservice {predefinedServiceName} -n hobbyfarm-system ## Backup a PredefinedService to a YAML manifest kubectl get predefinedservice {predefinedServiceName} -n hobbyfarm-system -o yaml &amp;gt; {predefinedServiceManifest} ## Delete a PredefinedService kubectl delete predefinedservice {predefinedServiceName} -n hobbyfarm-system Example PredefinedService Manifest The following shows an example of a PredefinedService manifest in Kubernetes.</description></item><item><title>Scenario</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scenario/</guid><description>Scenarios are the main content resource in HobbyFarm. They contain a series of steps which are presented to the end-user during a session. Scenarios also configure what VirtualMachineTemplates are necessary for use of the scenario.
Kubernetes Commands The following commands are useful for managing Scenario resources in Kubernetes.
## Get a list of all Scenarios kubectl get scenarios -n hobbyfarm-system ## Create a Scenario from a YAML manifest kubectl apply -f {scenarioManifest} -n hobbyfarm-system ## Edit a Scenario kubectl edit scenario {scenarioName} -n hobbyfarm-system ## Backup a Scenario to a YAML manifest kubectl get scenario {scenarioName} -n hobbyfarm-system -o yaml &amp;gt; {scenarioManifest} ## Delete a Scenario kubectl delete scenario {scenarioName} -n hobbyfarm-system Example Scenario Manifest The following shows an example of a Scenario manifest in Kubernetes.</description></item><item><title>ScheduledEvent</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scheduledevent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scheduledevent/</guid><description>In HobbyFarm, a ScheduledEvent is a collection of Scenarios and Courses that are scheduled to run at a specific time. ScheduledEvents make use of an access code to restrict access to the event.
Users must enter the access code to view and initiate the event. The access code is created during the creation of the ScheduledEvent and can be changed at any time. A ScheduledEvent can be configured to provision virtual machines on-demand or at a specific time.</description></item><item><title>Scope</title><link>http://hobbyfarm.github.io/docs/architecture/resources/scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/scope/</guid><description>A Scope is used to control access to settings in the HobbyFarm UI. For example, a setting that is only accessible by administrators would be assigned to the admin-ui scope.
Kubernetes Commands The following commands are useful for managing Scope resources in Kubernetes.
## Get a list of all Scopes kubectl get scopes -n hobbyfarm-system ## Create a Scope from a YAML manifest kubectl apply -f {scopeManifest} -n hobbyfarm-system ## Edit a Scope kubectl edit scope {scopeName} -n hobbyfarm-system ## Backup a Scope to a YAML manifest kubectl get scope {scopeName} -n hobbyfarm-system -o yaml &amp;gt; {scopeManifest} ## Delete a Scope kubectl delete scope {scopeName} -n hobbyfarm-system Example Scope Manifests The following shows an example of a Scope manifest in Kubernetes.</description></item><item><title>Session</title><link>http://hobbyfarm.github.io/docs/architecture/resources/session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/session/</guid><description>The Session resource in HobbyFarm tracks one or more users execution of a scenario or course, storing information such as the start time of the user, which scenario or course is being executed, etc.
NOTE: ⚠️ Sessions are created by HobbyFarm and SHOULD NOT be modified and/or created manually. This documentation is provided for informational purposes only.
Kubernetes Commands The following commands are useful for managing Session resources in Kubernetes.</description></item><item><title>Settings</title><link>http://hobbyfarm.github.io/docs/architecture/resources/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/settings/</guid><description>HobbyFarm makes use of adjustable settings to alter the behavior of the platform by adding or removing features via feature-gates or by setting variables, such as the retention time of specific objects.
Settings always have a name and a scope. The name provides a unique identifier for the setting while the scope defines who can adjust settings as well as who can retrieve the settings.
All settings are dynamically rendered in the Admin-UI under the Configuration &amp;gt; Settings page.</description></item><item><title>User</title><link>http://hobbyfarm.github.io/docs/architecture/resources/user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/user/</guid><description>Users are represented in HobbyFarm via the User resource. Users can be created automatically via the registration page or manually via a manifest.
Kubernetes Commands The following commands are useful for managing User resources in Kubernetes.
## Get a list of all Users kubectl get users -n hobbyfarm-system ## Create a User from a YAML manifest kubectl apply -f {userManifest} -n hobbyfarm-system ## Edit a User kubectl edit user {userName} -n hobbyfarm-system ## Backup a User to a YAML manifest kubectl get user {userName} -n hobbyfarm-system -o yaml &amp;gt; {userManifest} ## Delete a User kubectl delete user {userName} -n hobbyfarm-system Example User Manifest The following is an example of a User resource in Kubernetes.</description></item><item><title>Virtual Machine Template</title><link>http://hobbyfarm.github.io/docs/architecture/resources/virtualmachinetemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://hobbyfarm.github.io/docs/architecture/resources/virtualmachinetemplate/</guid><description>A VirtualMachineTemplate allows the HobbyFarm platform to schedule resources across multiple providers while providing a common definition for content creators. It is a required resource for creating an Environment.
A VM template represents a potential VM configuration, with its implementation varying by provider. For instance, AWS might interpret the template as a t3.medium, while Azure might implement it as a Standard_D2_v2.
Each Environment is responsible for determining the specific realization of a VirtualMachineTemplate.</description></item></channel></rss>